# FEYZA ÖZLÜ e2580868 

.pos 0x0
    irmovq stack, %rsp
    irmovq head, %rdi 
    call selection_sort_rec
    halt

/* Absolutely positioned here to debug addresses more easily. */
.pos 0x200
head:
    .quad 17
    .quad node1
node1:
    .quad 24
    .quad node2
node2:
    .quad 6
    .quad node3 
node3:
    .quad 11
    .quad node4
node4:
    .quad 4
    .quad node5
node5:
    .quad 5
    .quad node6
node6:
    .quad 3
    .quad node7
node7:
    .quad 40
    .quad node8
node8:
    .quad 19
    .quad node9
node9:
    .quad 52
    .quad node10
node10:
    .quad 8
    .quad 0  /* Remember that 0 is null. */
    
selection_sort_rec:
    pushq %r12
    pushq %r13
    pushq %r14
    pushq %rbx

    andq %rdi, %rdi          # if head == NULL
    je done
    mrmovq 8(%rdi), %rcx     # load head -> next
    andq %rcx, %rcx          # if head -> next == NULL
    je done 

    rrmovq %rdi, %r8         # min = head
    irmovq $0, %r9           # prevMin = NULL
    rrmovq %rdi, %r10        # curr = head

loop:
    mrmovq 8(%r10), %r11     # load curr -> next
    andq %r11, %r11          # if curr -> next == NULL
    je exit_loop 

    mrmovq 0(%r11), %r12     # load curr -> next -> data
    mrmovq 0(%r8), %r13      # load min -> data into
    subq %r12, %r13          # if (min -> data) <= (curr -> next -> data) then jump
    jle loop_updates

    mrmovq 8(%r10), %r8      # min = curr -> next
    rrmovq %r10, %r9         # prevMin = curr

loop_updates:
    mrmovq 8(%r10), %r10     # curr = curr -> next
    jmp loop

exit_loop:
    rrmovq %r8, %r14         # load min
    subq %rdi, %r14          # if min == head then jump
    je jump_end_of_outer_if

    mrmovq 8(%rdi), %rdx     # temp = head -> next
    mrmovq 8(%r8), %rcx      # load min -> next
    rmmovq %rcx, 8(%rdi)     # head -> next = min -> next
    rrmovq %rdx, %r11        # load temp
    subq %r8, %r11           # if temp == min then jump
    je inner_if

    rmmovq %rdx, 8(%r8)      # min -> next = temp
    rmmovq %rdi, 8(%r9)      # prevMin -> next = head
    jmp exit_if_else

inner_if:
    rmmovq %rdi, 8(%r8)      # min -> next = head

exit_if_else:
    rrmovq %r8, %rdi        # head = min

jump_end_of_outer_if:
    rrmovq %rdi, %rbx        # save current head
    mrmovq 8(%rdi), %rdi     # load head -> next into %rdi
    pushq %rbx       

    call selection_sort_rec
    popq %rbx

    rmmovq %rax, 8(%rbx)     # head -> next = return value
    rrmovq %rbx, %rdi 

done:
    rrmovq %rdi, %rax        # return head
    popq %r12
    popq %r13
    popq %r14
    popq %rbx
    ret
    
.pos 0x800
stack: